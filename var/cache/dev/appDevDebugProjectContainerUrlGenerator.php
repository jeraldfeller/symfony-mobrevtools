<?php

use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Exception\RouteNotFoundException;
use Psr\Log\LoggerInterface;

/**
 * appDevDebugProjectContainerUrlGenerator
 *
 * This class has been auto-generated
 * by the Symfony Routing Component.
 */
class appDevDebugProjectContainerUrlGenerator extends Symfony\Component\Routing\Generator\UrlGenerator
{
    private static $declaredRoutes;

    /**
     * Constructor.
     */
    public function __construct(RequestContext $context, LoggerInterface $logger = null)
    {
        $this->context = $context;
        $this->logger = $logger;
        if (null === self::$declaredRoutes) {
            self::$declaredRoutes = array(
        '_wdt' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:toolbarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_wdt',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_home' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:homeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_bar' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchBarAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/search_bar',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_info' => array (  0 =>   array (    0 => 'about',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:infoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'about',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler/info',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_phpinfo' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:phpinfoAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/phpinfo',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_search_results' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:searchResultsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/search/results',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_open_file' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:openAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/_profiler/open',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.profiler:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    1 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_router' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.router:panelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/router',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:showAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_profiler_exception_css' => array (  0 =>   array (    0 => 'token',  ),  1 =>   array (    '_controller' => 'web_profiler.controller.exception:cssAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/exception.css',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'token',    ),    2 =>     array (      0 => 'text',      1 => '/_profiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        '_twig_error_test' => array (  0 =>   array (    0 => 'code',    1 => '_format',  ),  1 =>   array (    '_controller' => 'twig.controller.preview_error:previewErrorPageAction',    '_format' => 'html',  ),  2 =>   array (    'code' => '\\d+',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => '[^/]++',      3 => '_format',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '\\d+',      3 => 'code',    ),    2 =>     array (      0 => 'text',      1 => '/_error',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_blacklistreport_showbotreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BlacklistReportController::showBotReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/blacklist',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_blacklistreport_ajaxgetreportsbot' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BlacklistReportController::ajaxGetReportsBot',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-blacklist',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_blacklistreport_deletedata' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BlacklistReportController::deleteDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/delete-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_botreport_showbotreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BotReportController::showBotReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/bot',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_botreport_ajaxgetreportsbot' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BotReportController::ajaxGetReportsBot',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-bot',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_botreport_deletedata' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\BotReportController::deleteDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/delete-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cakeApiOfferFeed' => array (  0 =>   array (  ),  1 =>   array (    'affiliateId' => NULL,    'apiKey' => NULL,    'network' => NULL,    '_controller' => 'AppBundle\\Controller\\CakeApiController::getOffersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/cake-api/{$affiliateId}/{$apiKey}/{$network}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'cakeApiApplyOffer' => array (  0 =>   array (  ),  1 =>   array (    'affiliateId' => NULL,    'apiKey' => NULL,    'network' => NULL,    'contractId' => NULL,    '_controller' => 'AppBundle\\Controller\\CakeApiController::applyOffersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/cake-api/{$affiliateId}/{$apiKey}/{$network}/{$contractId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getCampaignAffiliate' => array (  0 =>   array (  ),  1 =>   array (    'affiliateId' => NULL,    'apiKey' => NULL,    'network' => NULL,    'campaignId' => NULL,    '_controller' => 'AppBundle\\Controller\\CakeApiController::getCampaignAffiliateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/cake-api/{$affiliateId}/{$apiKey}/{$network}/{$campaignId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'campaignB' => array (  0 =>   array (    0 => 'tid',    1 => 'page',  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::indexBAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'tid',    ),    2 =>     array (      0 => 'text',      1 => '/campaign/bot-settings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'campaign' => array (  0 =>   array (    0 => 'tid',    1 => 'page',  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'page',    ),    1 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'tid',    ),    2 =>     array (      0 => 'text',      1 => '/campaign',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getCampaigns' => array (  0 =>   array (    0 => 'tid',  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getCampaignsForSelect',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'tid',    ),    1 =>     array (      0 => 'text',      1 => '/campaign/get-campaigns',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'campaignDetailsAll' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getCampaignDetailsAllAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-details/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getCampaignMatch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getGroupCampaignMatch',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-campaign-match',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'campaignGetApiCampaigns' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getApiCampaignAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-api-campaigns',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'campaignGetApiExoclickCampaigns' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getApiExoClickCampaigns',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-api-exoclick-campaigns',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addCampaign' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addCampaignAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-campaign',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addPresetRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addPresetRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-preset-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editPresetRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::editPresetRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/edit-preset-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deletePresetRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::deletePresetRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/delete-preset-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::editRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/update-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateChangeRuleStatus' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::updatChangeRuleStatusAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/update-change-rule-status',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteCampaignRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::deleteCampaignRuleAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/delete-campaign-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'saveData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::saveDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/save-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::deleteDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/delete-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addVertical' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addVertical',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-vertical',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateSafeList' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::updateSafeList',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/update-safe-list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateSafeListActive' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::updateSafeListActive',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/update-safe-list-active',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getVeritical' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getVertical',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-verticals',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteVertical' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::deleteVertical',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/delete-vertical',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addCampaignGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addCampaignGroup',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-campaign-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addBidAdjustmentRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addBidAdjustmentRule',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-bid-adjustment-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_campaign_ajaxgetreportsbot' => array (  0 =>   array (    0 => 'trafficSourceId',  ),  1 =>   array (    'trafficSourceId' => NULL,    '_controller' => 'AppBundle\\Controller\\CampaignController::ajaxGetReportsBot',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'trafficSourceId',    ),    1 =>     array (      0 => 'text',      1 => '/ajax/get-placement-list',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_campaign_ajaxgetrulepresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::ajaxGetRulePresets',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-rule-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_campaign_getcampaignrulepresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::getCampaignRulePresets',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/get-campaign-rule-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteCampaignGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::deleteCampaignGroup',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/delete-campaign-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addIpRule' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CampaignController::addIpRule',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/campaign/add-ip-rule',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getGeoCodeByCountry' => array (  0 =>   array (  ),  1 =>   array (    'country' => NULL,    '_controller' => 'AppBundle\\Controller\\CommonController::getGeoCodeByCountryAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/common/get-geo-code-by-country/{$country}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonCreateDateRange' => array (  0 =>   array (  ),  1 =>   array (    'startDate' => NULL,    'endDate' => NULL,    '_controller' => 'AppBundle\\Controller\\CommonController::createDateRangeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/common/create-date-range/{$startDate}/{$endDate}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonCreateTimeRange' => array (  0 =>   array (  ),  1 =>   array (    'start' => NULL,    'end' => NULL,    '_controller' => 'AppBundle\\Controller\\CommonController::createTimeRangeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/common/create-time-range/{$start}/{$end}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonGetActiveCampaigns' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CommonController::getActiveCampaignsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-active-campaigns',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonGetImportedCampaigns' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\CommonController::getImportedCampaignsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-imported-campaigns',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_showconversionsreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::showConversionsReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/conversions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonGetImportedCampaignsAll' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::getImportedCampaignsAllAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-imported-campaigns/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'commonGetImportedCampaignsLabelAll' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::getImportedCampaignsLabelAllAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-imported-campaigns-label/all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_ajaxgetreportsconversions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::ajaxGetReportsConversions',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-conversions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'clearConversionReport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::clearConversionReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/clear-conversion-report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fetchConversions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::fetchConversionsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/fetch-conversions',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fetchIpData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::fetchIpDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/fetch-ip-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mergeIpConversionData' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::mergeIpConversionDataAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/merge-ip-conversion-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mergeIpDataConversionSecondPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::mergeIpConversionDataSecondPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/merge-ip-conversion-data-second-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'mergeIpDataConversionThirdPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::mergeIpConversionDataThirdPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/merge-ip-conversion-data-third-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'finalizingFirstPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::finalizingFirstPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/finalizing-first-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'finalizingSecondPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::finalizingSecondPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/finalizing-second-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'finalizingThirdPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::finalizingThirdPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/finalizing-third-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'finalPhase' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::finalPhaseAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/final-phase',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_getimporteddatareport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::getImportedDataReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/get-imported-data-report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_importfile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::importFileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/import-file',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_updateimportfile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::updateImportFileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/update-import-file',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_conversionsreport_deletelabel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ConversionsReportController::deleteLabelAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/delete-label',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'homepage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DefaultController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteReports' => array (  0 =>   array (  ),  1 =>   array (    'data' => NULL,    '_controller' => 'AppBundle\\Controller\\DeletesController::deleteReportsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete/reports/{$data}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteReportsAll' => array (  0 =>   array (  ),  1 =>   array (    'data' => NULL,    '_controller' => 'AppBundle\\Controller\\DeletesController::deleteReportsAllAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete/reports-all/{$data}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteIndividual' => array (  0 =>   array (  ),  1 =>   array (    'appBundle' => NULL,    'column' => NULL,    'value' => NULL,    '_controller' => 'AppBundle\\Controller\\DeletesController::deleteIndividualColumnAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/delete/individual/{$appBundle}/{$column}/{$value}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_domaintracker_showdomainreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DomainTrackerController::showDomainReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/domain',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_domaintracker_updatedomaincheck' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DomainTrackerController::updateDomainCheckAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/update-domain-check',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_domaintracker_ajaxgetreportsdomain' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\DomainTrackerController::ajaxGetReportsDomain',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-domain',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'exoClickGetCampaigns' => array (  0 =>   array (  ),  1 =>   array (    'token' => NULL,    '_controller' => 'AppBundle\\Controller\\ExoClickApiController::exoClickGetCampaignsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/exoclick/get-campaigns/{$token}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'exoClickBlockDomain' => array (  0 =>   array (  ),  1 =>   array (    'token' => NULL,    'vid' => NULL,    'targets' => NULL,    '_controller' => 'AppBundle\\Controller\\ExoClickApiController::exoClickPostBlockDomain',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/exoclick/block-domain/{$token}/{$vid}/{$targets}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'exoClickDeleteBlockDomain' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ExoClickApiController::exoClickDeleteBlockDomain',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/exoclick/delete-block-domain/{$token}/{$vid}/{$target}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ipCompile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ExtrasController::showIpCompileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/ip-compiler',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'executeIpCompile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ExtrasController::ipCompile',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/extras/execute-compile-ip',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getFilters' => array (  0 =>   array (  ),  1 =>   array (    'bundle' => NULL,    'column' => NULL,    '_controller' => 'AppBundle\\Controller\\FiltersController::getFiltersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/filters/{$bundle}/{$column}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_htmldata_showhtmlpages' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\HtmlDataController::showHtmlPagesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/exploit-log',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_htmldata_getcode' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\HtmlDataController::getCodeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/html-pages/get-code',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_htmldata_displaycode' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\HtmlDataController::displayCodeAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/html-pages/display-code',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_htmldata_ajaxgethtmldata' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\HtmlDataController::ajaxGetHtmlData',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-html-data',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_ip_showipreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\IpController::showIpReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/ip',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_ip_ajaxgetreportsip' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\IpController::ajaxGetReportsIp',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-ip',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_landers_showlanderspage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::showLandersPageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/landers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_landers_addlanders' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::addLandersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/add-landers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_landers_editlander' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::editLanderAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/get-edit-lander',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_landers_putlanders' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::putLandersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/put-lander',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_landers_getlanderstofile' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::getLandersToFileAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-landers-to-file',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'clearTmpFiles' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LandersController::clearTmpFilesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/clear-tmp-files',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'listReports' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ListReportsController::indexAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/data-reports',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_listreports_ajaxgetlistreports' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\ListReportsController::ajaxGetListReports',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/list-reports',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_logtracker_showlogtrackerreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LogTrackerController::showLogTrackerReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/data-log',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_logtracker_ajaxgetreportsip' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\LogTrackerController::ajaxGetReportsIp',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-log-tracker',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_metrics_showmetricsreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\MetricsController::showMetricsReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/metrics',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_metrics_getmetricsreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\MetricsController::getMetricsReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/get-metrics-report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'menuPages' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\NavmenuController::getMenuPagesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/nav/menu-pages',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_showofferspage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::showOffersPageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/offers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_addoffers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::addOffersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/add-offers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'offerGroups' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::showGroupsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offer-search/offer-groups',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addOfferGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::addGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/add-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editOfferGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::editGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/edit-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteOfferGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::deleteGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/delete-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_ajaxgetoffergroups' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::ajaxGetOfferGroups',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-offer-groups',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'offerSearch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::showOfferSearchAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offer-search',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'searchOffer' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::searchOfferAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/search-offer',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'applyOffers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::applyOfferAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/apply-offers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'refreshOffers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::refreshOfferAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/refresh-offers',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addOfferToGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::addOfferToGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/add-offer-to-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_ajaxgetcaketmptbl' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::ajaxGetCakeTmpTbl',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-cake-tmp-tbl',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'offersGroupsOffers' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    'id' => NULL,    '_controller' => 'AppBundle\\Controller\\OffersController::showManageOffersGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/offer-search/group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_getgroupoffers' => array (  0 =>   array (    0 => 'groupId',  ),  1 =>   array (    'groupId' => NULL,    '_controller' => 'AppBundle\\Controller\\OffersController::getGroupOffersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupId',    ),    1 =>     array (      0 => 'text',      1 => '/ajax/offer/group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteOfferGroupsOffers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::deleteOffersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/group-delete',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'offerPresetSearch' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::showOfferPresetAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offer-search/offer-preset-searches',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addOfferPreset' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::addPresetAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/add-preset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editOfferPreset' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::editPresetAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/edit-preset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteOfferPreset' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::deletePresetAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/offers/delete-preset',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_offers_getpresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\OffersController::getPresetsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/offer/presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_showapiaccesscredentials' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::showApiAccessCredentials',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/api-access',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_updateaccess' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::updateAccessAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/update-access-action',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_showtrafficsourcesettings' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::showTrafficSourceSettings',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/traffic-source',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_ajaxgettrafficsource' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::ajaxGetTrafficSource',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-traffic-source',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_trafficdelete' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::trafficDeleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/traffic-delete-action',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_gettraffic' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::getTrafficAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/traffic-get-action',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_importtrafficsource' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::importTrafficsourceAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/add-trafficsource',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getApiAccessByTraffic' => array (  0 =>   array (  ),  1 =>   array (    'traffic' => NULL,    '_controller' => 'AppBundle\\Controller\\SettingsController::getApiAccessByTrafficAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/settings/get-api-access-by-traffic/{$traffic}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_presetsrules' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::presetsRulesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/settings/presets-rules',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_showpresetssettings' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::showPresetsSettings',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/lander-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_ajaxgetpresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::ajaxGetPresets',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addPresetsActions' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::addPresetsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/settings/add-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getPresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::getPresetsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/settings/get-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updatePresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::presetEditAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/settings/edit-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deletePresets' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::presetDeleteAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/settings/delete-presets',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_showaffiliate' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::showAffiliateAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/affiliate',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addNetworkAction' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::addNetworkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/settings/add-network',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editNetwork' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::editNetworkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/settings/edit-network',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteNetwork' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::deleteNetworkAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/settings/delete-network',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_settings_ajaxgetnetwork' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\SettingsController::ajaxGetNetwork',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-affiliate-network',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'registerToken' => array (  0 =>   array (  ),  1 =>   array (    'VOLUUMSESSIONID' => NULL,    'EXOSESSIONTOKEN' => NULL,    '_controller' => 'AppBundle\\Controller\\SystemController::registerTokenAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/system/register-token/{$VOLUUMSESSIONID}/{$EXOSESSIONTOKEN}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_showtrafficreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::showTrafficReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/traffic',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_gettrafficmonitoringreportsfilters' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::getTrafficMonitoringReportsFiltersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/get-traffic-source-monitoring-reports-filter',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_ajaxgetreportstrafficmonitoring' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::ajaxGetReportsTrafficMonitoring',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-traffic-monitoring',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_getcampaigntrafficsettings' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::getCampaignTrafficSettingsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/get-campaign-traffic-settings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_updatecampaigntrafficsettingsvisits' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::updateCampaignTrafficSettingsVisits',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/update-traffic-monitoring-settings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_updatecampaigntrafficglobalsettings' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::updateCampaignTrafficGlobalSettings',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/update-traffic-monitoring-global-settings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_updatecampaigntrafficnotificationsettings' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::updateCampaignTrafficNotificationSettings',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/update-traffic-monitoring-notification-settings',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_trafficmonitoring_updatecampaigntrafficnotificationsettingscampaignlevel' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\TrafficMonitoringController::updateCampaignTrafficNotificationSettingsCampaignLevel',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/monitoring/update-traffic-monitoring-notification-settings-campaign-level',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_renderloginform' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::renderLoginForm',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/login',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_create' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::createAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/create-account',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_showactionbyid' => array (  0 =>   array (    0 => 'param',  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::showActionById',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'param',    ),    1 =>     array (      0 => 'text',      1 => '/user/get-account',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_showactionall' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::showActionAll',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/get-account-all',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_login' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::loginAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/login-action',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_logout' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::logout',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/user/logout',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'groups' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::showGroupsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/manage-users/groups',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'manageUsersGroups' => array (  0 =>   array (    0 => 'groupId',  ),  1 =>   array (    'groupId' => NULL,    '_controller' => 'AppBundle\\Controller\\UsersController::showManageUsersGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupId',    ),    1 =>     array (      0 => 'text',      1 => '/global-settings/manage-users/groups/group-id',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'users' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::showUsersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/global-settings/manage-users/users',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addUser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::addUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/add-user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editUser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::editUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/edit-user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteUser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::deleteUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/delete-user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'addGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::addGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/add-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'editGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::editGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/edit-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::deleteGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/delete-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getGroupByUserId' => array (  0 =>   array (    0 => 'id',  ),  1 =>   array (    'id' => NULL,    '_controller' => 'AppBundle\\Controller\\UsersController::getGroupByUserIdAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'id',    ),    1 =>     array (      0 => 'text',      1 => '/manage-users/get-group-by-user-id',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'groupAddUser' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::groupAddUserAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/group-add-user',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'deleteUserFromGroup' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::deleteUserFromGroupAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/manage-users/delete-user-from-group',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_getusers' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::getUsersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-users',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_getgroups' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\UsersController::getGroupsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-groups',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_users_getgroupusers' => array (  0 =>   array (    0 => 'groupId',  ),  1 =>   array (    'groupId' => NULL,    '_controller' => 'AppBundle\\Controller\\UsersController::getGroupUsersAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '/',      2 => '[^/]++',      3 => 'groupId',    ),    1 =>     array (      0 => 'text',      1 => '/ajax/groups/get-users',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'voluumReport' => array (  0 =>   array (  ),  1 =>   array (    'url' => NULL,    'query' => NULL,    'method' => NULL,    'sessionId' => NULL,    '_controller' => 'AppBundle\\Controller\\VoluumApiController::getVoluumReportsAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum-report/{$url}/{$query}/{$method}/{$sessionId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'voluumPost' => array (  0 =>   array (  ),  1 =>   array (    'url' => NULL,    'query' => NULL,    'method' => NULL,    'sessionId' => NULL,    '_controller' => 'AppBundle\\Controller\\VoluumApiController::postVoluumAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum-post/{$url}/{$query}/{$method}/{$sessionId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'voluumGetCountries' => array (  0 =>   array (  ),  1 =>   array (    'sessionId' => NULL,    '_controller' => 'AppBundle\\Controller\\VoluumApiController::voluumGetCountriesAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum/get-countries',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'voluumGetLander' => array (  0 =>   array (  ),  1 =>   array (    'landerId' => NULL,    '_controller' => 'AppBundle\\Controller\\VoluumApiController::voluumGetLanderAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum/get-lander/{$landerId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'voluumPutLander' => array (  0 =>   array (  ),  1 =>   array (    'url' => NULL,    'query' => NULL,    'sessionId' => NULL,    '_controller' => 'AppBundle\\Controller\\VoluumApiController::voluumPutLanderAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum/put-lander/{$url}/{$query}/{$sessionId}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_voluumapi_showlanderspage' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\VoluumApiController::showLandersPageAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/tools/cost-update',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'getCampaignsManualCost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\VoluumApiController::getCampaignManualCostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum/get-campaigns-manual-cost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'updateCost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\VoluumApiController::updateCostAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/voluum/update-cost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'ajaxGetCampaignsManualCost' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\VoluumApiController::ajaxGetReportsCampaignManualCost',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-campaigns-manual-cost',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_whitelistreport_showwhitelistreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\WhitelistReportController::showWhitelistReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/whitelist',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_whitelistreport_getwhitelistreport' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\WhitelistReportController::getWhitelistReportAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/reports/get-whitelist-report',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'app_whitelistreport_ajaxgetreportswhitelist' => array (  0 =>   array (  ),  1 =>   array (    '_controller' => 'AppBundle\\Controller\\WhitelistReportController::ajaxGetReportsWhitelist',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/ajax/get-reports-whitelist',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'zeroparkApiAction' => array (  0 =>   array (  ),  1 =>   array (    'url' => NULL,    'query' => NULL,    'method' => NULL,    'token' => NULL,    '_controller' => 'AppBundle\\Controller\\ZeroparkApiController::zeroparkRequestAction',  ),  2 =>   array (  ),  3 =>   array (    0 =>     array (      0 => 'text',      1 => '/api/zeropark/{$url}/{$query}/{$method}/{$token}',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
        'fos_js_routing_js' => array (  0 =>   array (    0 => '_format',  ),  1 =>   array (    '_controller' => 'fos_js_routing.controller:indexAction',    '_format' => 'js',  ),  2 =>   array (    '_format' => 'js|json',  ),  3 =>   array (    0 =>     array (      0 => 'variable',      1 => '.',      2 => 'js|json',      3 => '_format',    ),    1 =>     array (      0 => 'text',      1 => '/js/routing',    ),  ),  4 =>   array (  ),  5 =>   array (  ),),
    );
        }
    }

    public function generate($name, $parameters = array(), $referenceType = self::ABSOLUTE_PATH)
    {
        if (!isset(self::$declaredRoutes[$name])) {
            throw new RouteNotFoundException(sprintf('Unable to generate a URL for the named route "%s" as such route does not exist.', $name));
        }

        list($variables, $defaults, $requirements, $tokens, $hostTokens, $requiredSchemes) = self::$declaredRoutes[$name];

        return $this->doGenerate($variables, $defaults, $requirements, $tokens, $parameters, $name, $referenceType, $hostTokens, $requiredSchemes);
    }
}
